{"version":3,"sources":["webpack:///./src/components/PostItem/styled.js","webpack:///./src/components/PostItem/index.js","webpack:///./src/components/Pagination/styled.js","webpack:///./src/components/Pagination/index.js","webpack:///./src/components/ListWrapper/styled.js","webpack:///./src/templates/blog-list.js"],"names":["PostItemLink","styled","AniLink","PostItemWrapper","section","media","lessThan","PostItemTag","div","props","background","PostItemInfo","PostItemDate","time","PostItemTitle","h1","PostItemDescription","p","PostItem","slug","category","date","timeToRead","title","description","cover","direction","bg","getThemeColors","duration","to","PaginationWrapper","Pagination","isFirst","isLast","currentPage","numPages","prevPage","nextPage","ListWrapper","query","BlogList","postList","data","allMarkdownRemark","edges","pageContext","Layout","map","node","fields","frontmatter","key"],"mappings":"8nBAIO,IAAMA,EAAeC,YAAOC,KAAV,2EAAGD,CAAH,2IAcZE,EAAkBF,IAAOG,QAAV,8EAAGH,CAAH,oMAcxBI,IAAMC,SAAS,QAAfD,CAdwB,MAqBfE,EAAcN,IAAOO,IAAV,0EAAGP,CAAH,wOAER,SAAAQ,GAAK,OACjBA,EAAMC,WAAaD,EAAMC,WAAa,qBAWtCL,IAAMC,SAAS,QAAfD,CAdoB,MA4BXM,EAAeV,IAAOO,IAAV,2EAAGP,CAAH,8DAKrBI,IAAMC,SAAS,QAAfD,CALqB,MAUZO,EAAeX,IAAOY,KAAV,2EAAGZ,CAAH,uBAIZa,EAAgBb,IAAOc,GAAV,4EAAGd,CAAH,2GAWbe,EAAsBf,IAAOgB,EAAV,kFAAGhB,CAAH,uD,YC9CjBiB,IAxCE,SAAC,GAAD,IACfC,EADe,EACfA,KACAT,EAFe,EAEfA,WACAU,EAHe,EAGfA,SACAC,EAJe,EAIfA,KACAC,EALe,EAKfA,WACAC,EANe,EAMfA,MACAC,EAPe,EAOfA,YAPe,OASf,kBAAC,EAAD,CACEC,OAAK,EACLC,UAAU,QACVC,GAAIC,cACJC,SAAU,GACVC,GAAIX,GAEJ,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAeT,WAAYA,GAAaU,GACxC,kBAAC,EAAD,KACE,kBAAC,EAAD,KACGC,EACAC,EAAU,MAASA,EAAT,kBAAuC,IAEpD,kBAAC,EAAD,KAAkBC,GAClB,kBAAC,EAAD,KAAwBC,Q,yTC3BzB,IAAMO,EAAoB9B,IAAOG,QAAV,4EAAGH,CAAH,mPAQ1BI,IAAMC,SAAS,QAAfD,CAR0B,M,YCoDf2B,EAhDI,SAAC,GAAD,IACjBC,EADiB,EACjBA,QACAC,EAFiB,EAEjBA,OACAC,EAHiB,EAGjBA,YACAC,EAJiB,EAIjBA,SACAC,EALiB,EAKjBA,SACAC,EANiB,EAMjBA,SANiB,OAQjB,kBAAC,EAAD,MACIL,GACA,kBAAC,IAAD,CACEH,GAAIO,EACJZ,OAAK,EACLC,UAAU,OACVC,GAAIC,cACJC,SAAU,IALZ,qBAWF,2BACGM,EADH,OACoBC,IAGlBF,GACA,kBAAC,IAAD,CACEJ,GAAIQ,EACJb,OAAK,EACLC,UAAU,QACVC,GAAIC,cACJC,SAAU,IALZ,sBC/BOU,EAActC,IAAOG,QAAV,sEAAGH,CAAH,6LCqDXuC,EAAK,YA0BHC,UAvEE,SAAAhC,GACf,IAAMiC,EAAWjC,EAAMkC,KAAKC,kBAAkBC,MADtB,EAEUpC,EAAMqC,YAAhCX,EAFgB,EAEhBA,YAAaC,EAFG,EAEHA,SACfH,EAA0B,IAAhBE,EACVD,EAASC,IAAgBC,EACzBC,EAAWF,EAAc,GAAM,EAAI,IAAxB,UAAuCA,EAAc,GAChEG,EAAQ,UAAYH,EAAc,GAExC,OACE,kBAACY,EAAA,EAAD,KACE,kBAAC,IAAD,CAAKxB,MAAM,SACX,kBAAC,EAAD,KACGmB,EAASM,KACR,oBACEC,KACY9B,EAFd,EAEI+B,OAAU/B,KAFd,IAGIgC,YAAezC,EAHnB,EAGmBA,WAAYU,EAH/B,EAG+BA,SAAUC,EAHzC,EAGyCA,KAAMG,EAH/C,EAG+CA,YAAaD,EAH5D,EAG4DA,MACxDD,EAJJ,EAIIA,WAJJ,OAOE,kBAACJ,EAAA,EAAD,CACEkC,IAAKjC,EACLA,KAAMA,EACNT,WAAYA,EACZU,SAAUA,EACVC,KAAMA,EACNC,WAAYA,EACZC,MAAOA,EACPC,YAAaA,QAKrB,kBAAC,EAAD,CACES,QAASA,EACTC,OAAQA,EACRC,YAAaA,EACbC,SAAUA,EACVC,SAAUA,EACVC,SAAUA","file":"component---src-templates-blog-list-js-a76b066fb9d23ed7f61a.js","sourcesContent":["import styled from \"styled-components\"\nimport AniLink from \"gatsby-plugin-transition-link/AniLink\"\nimport media from \"styled-media-query\"\n\nexport const PostItemLink = styled(AniLink)`\n  color: var(--texts);\n  display: flex;\n  text-decoration: none;\n\n  body#grid & {\n    background-color: var(--background);\n  }\n\n  &:hover {\n    color: var(--highlight);\n  }\n`\n\nexport const PostItemWrapper = styled.section`\n  align-items: center;\n  border-bottom: 1px solid var(--borders);\n  display: flex;\n  padding: 2rem 3rem;\n  width: 100%;\n\n  body#grid & {\n    border: none;\n    padding: 2rem 1rem;\n    flex-direction: column;\n    justify-content: center;\n  }\n\n  ${media.lessThan(\"large\")`\n    align-items: flex-start;\n    flex-direction: column;\n    padding: 2rem 1rem;\n  `}\n`\n\nexport const PostItemTag = styled.div`\n  align-items: center;\n  background: ${props =>\n    props.background ? props.background : \"var(--highlight)\"};\n  border-radius: 50%;\n  color: #fff;\n  display: flex;\n  font-size: 1.3rem;\n  font-weight: 700;\n  justify-content: center;\n  min-height: 90px;\n  min-width: 90px;\n  text-transform: uppercase;\n\n  ${media.lessThan(\"large\")`\n    border-radius: 0;\n    font-size: 1rem;\n    min-height: auto;\n    min-width: auto;\n    padding: .2rem .5rem;\n    margin-bottom: .7rem;\n  `}\n\n  body#grid & {\n    margin-bottom: 1.5rem;\n  }\n`\n\nexport const PostItemInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-left: 1.5rem;\n\n  ${media.lessThan(\"large\")`\n    margin: 0;\n  `}\n`\n\nexport const PostItemDate = styled.time`\n  font-size: 0.9rem;\n`\n\nexport const PostItemTitle = styled.h1`\n  font-size: 1.6rem;\n  font-weight: 700;\n  margin: 0.2rem 0 0.5rem;\n\n  body#grid & {\n    line-height: 1.1;\n    margin: 0.8rem 0;\n  }\n`\n\nexport const PostItemDescription = styled.p`\n  font-size: 1.2rem;\n  font-weight: 300;\n  line-height: 1.2;\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport * as S from \"./styled\"\nimport getThemeColors from \"../../utils/getThemeColors\"\n\nconst PostItem = ({\n  slug,\n  background,\n  category,\n  date,\n  timeToRead,\n  title,\n  description,\n}) => (\n  <S.PostItemLink\n    cover\n    direction=\"right\"\n    bg={getThemeColors()}\n    duration={0.6}\n    to={slug}\n  >\n    <S.PostItemWrapper>\n      <S.PostItemTag background={background}>{category}</S.PostItemTag>\n      <S.PostItemInfo>\n        <S.PostItemDate>\n          {date}\n          {timeToRead ? ` • ${timeToRead} min de leitura` : \"\"}\n        </S.PostItemDate>\n        <S.PostItemTitle>{title}</S.PostItemTitle>\n        <S.PostItemDescription>{description}</S.PostItemDescription>\n      </S.PostItemInfo>\n    </S.PostItemWrapper>\n  </S.PostItemLink>\n)\n\nPostItem.propTypes = {\n  slug: PropTypes.string.isRequired,\n  background: PropTypes.string,\n  category: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired,\n  timeToRead: PropTypes.number,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n}\n\nexport default PostItem\n","import styled from \"styled-components\"\nimport media from \"styled-media-query\"\n\nexport const PaginationWrapper = styled.section`\n  align-items: center;\n  border-top: 1px solid var(--borders);\n  color: var(--texts);\n  display: flex;\n  padding: 1.5rem 3rem;\n  justify-content: space-between;\n\n  ${media.lessThan(\"large\")`\n    font-size: .8rem;\n    padding: 1rem;\n  `}\n\n  a {\n    color: var(--texts);\n    text-decoration: none;\n    transition: color 0.5s;\n\n    &:hover {\n      color: var(--highlight);\n    }\n  }\n`\n","import React from \"react\"\nimport AniLink from \"gatsby-plugin-transition-link/AniLink\"\nimport propTypes from \"prop-types\"\n\nimport * as S from \"./styled\"\nimport getThemeColors from \"../../utils/getThemeColors\"\n\nconst Pagination = ({\n  isFirst,\n  isLast,\n  currentPage,\n  numPages,\n  prevPage,\n  nextPage,\n}) => (\n  <S.PaginationWrapper>\n    {!isFirst && (\n      <AniLink\n        to={prevPage}\n        cover\n        direction=\"left\"\n        bg={getThemeColors()}\n        duration={0.6}\n      >\n        ← página anterior\n      </AniLink>\n    )}\n\n    <p>\n      {currentPage} de {numPages}\n    </p>\n\n    {!isLast && (\n      <AniLink\n        to={nextPage}\n        cover\n        direction=\"right\"\n        bg={getThemeColors()}\n        duration={0.6}\n      >\n        próxima página →\n      </AniLink>\n    )}\n  </S.PaginationWrapper>\n)\n\nPagination.propTypes = {\n  isFirst: propTypes.bool.isRequired,\n  isLast: propTypes.bool.isRequired,\n  currentPage: propTypes.number.isRequired,\n  numPages: propTypes.number.isRequired,\n  prevPage: propTypes.string,\n  nextPage: propTypes.string,\n}\n\nexport default Pagination\n","import styled from \"styled-components\"\n\nexport const ListWrapper = styled.section`\n  body#grid & {\n    background-color: var(--borders);\n    border-bottom: 1px solid var(--borders);\n    display: grid;\n    grid-area: posts;\n    grid-gap: 1px;\n    grid-template-columns: repeat(auto-fit, minmax(380px, 1fr));\n  }\n`\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/Layout\"\nimport SEO from \"../components/seo\"\nimport PostItem from \"../components/PostItem\"\nimport Pagination from \"../components/Pagination\"\n\nimport * as S from \"../components/ListWrapper/styled\"\n\nconst BlogList = props => {\n  const postList = props.data.allMarkdownRemark.edges\n  const { currentPage, numPages } = props.pageContext\n  const isFirst = currentPage === 1\n  const isLast = currentPage === numPages\n  const prevPage = currentPage - 1 === 1 ? \"/\" : `/page/${currentPage - 1}`\n  const nextPage = `/page/${currentPage + 1}`\n\n  return (\n    <Layout>\n      <SEO title=\"Home\" />\n      <S.ListWrapper>\n        {postList.map(\n          ({\n            node: {\n              fields: { slug },\n              frontmatter: { background, category, date, description, title },\n              timeToRead,\n            },\n          }) => (\n            <PostItem\n              key={slug}\n              slug={slug}\n              background={background}\n              category={category}\n              date={date}\n              timeToRead={timeToRead}\n              title={title}\n              description={description}\n            />\n          )\n        )}\n      </S.ListWrapper>\n      <Pagination\n        isFirst={isFirst}\n        isLast={isLast}\n        currentPage={currentPage}\n        numPages={numPages}\n        prevPage={prevPage}\n        nextPage={nextPage}\n      />\n    </Layout>\n  )\n}\n\nexport const query = graphql`\n  query PostList($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(\n      sort: { fields: frontmatter___date, order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            background\n            category\n            date(locale: \"pt-br\", formatString: \"DD [de] MMMM [de] YYYY\")\n            description\n            title\n          }\n          timeToRead\n        }\n      }\n    }\n  }\n`\n\nexport default BlogList\n"],"sourceRoot":""}